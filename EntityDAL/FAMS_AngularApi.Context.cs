//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FAMSEntities : DbContext
    {
        public FAMSEntities()
            : base("name=FAMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("FAMSEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[FAMSEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        public virtual ObjectResult<BINDACCOUNTS_Result> BINDACCOUNTS(string parentID)
        {
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BINDACCOUNTS_Result>("BINDACCOUNTS", parentIDParameter);
        }
    
        public virtual ObjectResult<BINDREPORTS_Result> BINDREPORTS(string fromdate, string todate, Nullable<int> customerid, string firstlevel, string secondlevel, string thirdlevel, string firstlevelid, string secondlevelid, string thirdlevelid)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var firstlevelParameter = firstlevel != null ?
                new ObjectParameter("Firstlevel", firstlevel) :
                new ObjectParameter("Firstlevel", typeof(string));
    
            var secondlevelParameter = secondlevel != null ?
                new ObjectParameter("Secondlevel", secondlevel) :
                new ObjectParameter("Secondlevel", typeof(string));
    
            var thirdlevelParameter = thirdlevel != null ?
                new ObjectParameter("Thirdlevel", thirdlevel) :
                new ObjectParameter("Thirdlevel", typeof(string));
    
            var firstlevelidParameter = firstlevelid != null ?
                new ObjectParameter("Firstlevelid", firstlevelid) :
                new ObjectParameter("Firstlevelid", typeof(string));
    
            var secondlevelidParameter = secondlevelid != null ?
                new ObjectParameter("Secondlevelid", secondlevelid) :
                new ObjectParameter("Secondlevelid", typeof(string));
    
            var thirdlevelidParameter = thirdlevelid != null ?
                new ObjectParameter("Thirdlevelid", thirdlevelid) :
                new ObjectParameter("Thirdlevelid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BINDREPORTS_Result>("BINDREPORTS", fromdateParameter, todateParameter, customeridParameter, firstlevelParameter, secondlevelParameter, thirdlevelParameter, firstlevelidParameter, secondlevelidParameter, thirdlevelidParameter);
        }
    
        public virtual ObjectResult<FAMS_Customer_Result> FAMS_Customer(string queryType, string emailid, Nullable<long> userId, Nullable<long> stateId, string jsondata)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var jsondataParameter = jsondata != null ?
                new ObjectParameter("Jsondata", jsondata) :
                new ObjectParameter("Jsondata", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FAMS_Customer_Result>("FAMS_Customer", queryTypeParameter, emailidParameter, userIdParameter, stateIdParameter, jsondataParameter);
        }
    
        public virtual ObjectResult<string> FAMS_Login(string queryType, string emailid, string password, string passwordKey, Nullable<long> userId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FAMS_Login", queryTypeParameter, emailidParameter, passwordParameter, passwordKeyParameter, userIdParameter);
        }
    
        public virtual int FAMSCashTransactions(string standardAccount, string accountName, string bankBalance, string liquidFundMV, string payable, string receivable, string pendingOrdersCash, string availableCashandEq, string marketValue, string cashEqasofMV, string modelName, string clientStatus, string inceptionDate, string schemeName, string constraints)
        {
            var standardAccountParameter = standardAccount != null ?
                new ObjectParameter("StandardAccount", standardAccount) :
                new ObjectParameter("StandardAccount", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var bankBalanceParameter = bankBalance != null ?
                new ObjectParameter("BankBalance", bankBalance) :
                new ObjectParameter("BankBalance", typeof(string));
    
            var liquidFundMVParameter = liquidFundMV != null ?
                new ObjectParameter("LiquidFundMV", liquidFundMV) :
                new ObjectParameter("LiquidFundMV", typeof(string));
    
            var payableParameter = payable != null ?
                new ObjectParameter("Payable", payable) :
                new ObjectParameter("Payable", typeof(string));
    
            var receivableParameter = receivable != null ?
                new ObjectParameter("Receivable", receivable) :
                new ObjectParameter("Receivable", typeof(string));
    
            var pendingOrdersCashParameter = pendingOrdersCash != null ?
                new ObjectParameter("PendingOrdersCash", pendingOrdersCash) :
                new ObjectParameter("PendingOrdersCash", typeof(string));
    
            var availableCashandEqParameter = availableCashandEq != null ?
                new ObjectParameter("AvailableCashandEq", availableCashandEq) :
                new ObjectParameter("AvailableCashandEq", typeof(string));
    
            var marketValueParameter = marketValue != null ?
                new ObjectParameter("MarketValue", marketValue) :
                new ObjectParameter("MarketValue", typeof(string));
    
            var cashEqasofMVParameter = cashEqasofMV != null ?
                new ObjectParameter("CashEqasofMV", cashEqasofMV) :
                new ObjectParameter("CashEqasofMV", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var clientStatusParameter = clientStatus != null ?
                new ObjectParameter("ClientStatus", clientStatus) :
                new ObjectParameter("ClientStatus", typeof(string));
    
            var inceptionDateParameter = inceptionDate != null ?
                new ObjectParameter("InceptionDate", inceptionDate) :
                new ObjectParameter("InceptionDate", typeof(string));
    
            var schemeNameParameter = schemeName != null ?
                new ObjectParameter("SchemeName", schemeName) :
                new ObjectParameter("SchemeName", typeof(string));
    
            var constraintsParameter = constraints != null ?
                new ObjectParameter("Constraints", constraints) :
                new ObjectParameter("Constraints", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAMSCashTransactions", standardAccountParameter, accountNameParameter, bankBalanceParameter, liquidFundMVParameter, payableParameter, receivableParameter, pendingOrdersCashParameter, availableCashandEqParameter, marketValueParameter, cashEqasofMVParameter, modelNameParameter, clientStatusParameter, inceptionDateParameter, schemeNameParameter, constraintsParameter);
        }
    
        public virtual int FAMSHoldingTrans(string standardAccounts, string subCat, string quantity, string unitCost, string cost, string price, string marketValue, string gainLoss, string gL, string assetsPer)
        {
            var standardAccountsParameter = standardAccounts != null ?
                new ObjectParameter("StandardAccounts", standardAccounts) :
                new ObjectParameter("StandardAccounts", typeof(string));
    
            var subCatParameter = subCat != null ?
                new ObjectParameter("SubCat", subCat) :
                new ObjectParameter("SubCat", typeof(string));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var unitCostParameter = unitCost != null ?
                new ObjectParameter("UnitCost", unitCost) :
                new ObjectParameter("UnitCost", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(string));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var marketValueParameter = marketValue != null ?
                new ObjectParameter("MarketValue", marketValue) :
                new ObjectParameter("MarketValue", typeof(string));
    
            var gainLossParameter = gainLoss != null ?
                new ObjectParameter("GainLoss", gainLoss) :
                new ObjectParameter("GainLoss", typeof(string));
    
            var gLParameter = gL != null ?
                new ObjectParameter("GL", gL) :
                new ObjectParameter("GL", typeof(string));
    
            var assetsPerParameter = assetsPer != null ?
                new ObjectParameter("AssetsPer", assetsPer) :
                new ObjectParameter("AssetsPer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAMSHoldingTrans", standardAccountsParameter, subCatParameter, quantityParameter, unitCostParameter, costParameter, priceParameter, marketValueParameter, gainLossParameter, gLParameter, assetsPerParameter);
        }
    
        public virtual int FAMSNAVTransactions(string sandardAccounts, string amount)
        {
            var sandardAccountsParameter = sandardAccounts != null ?
                new ObjectParameter("SandardAccounts", sandardAccounts) :
                new ObjectParameter("SandardAccounts", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAMSNAVTransactions", sandardAccountsParameter, amountParameter);
        }
    
        public virtual int FAMSTransTransactions(string standardaccount, string tranDate, string settlementDate, string security, string exchg, string quantity, string unitPrice, string brkg, string sTT, string settlementAmount)
        {
            var standardaccountParameter = standardaccount != null ?
                new ObjectParameter("Standardaccount", standardaccount) :
                new ObjectParameter("Standardaccount", typeof(string));
    
            var tranDateParameter = tranDate != null ?
                new ObjectParameter("TranDate", tranDate) :
                new ObjectParameter("TranDate", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var securityParameter = security != null ?
                new ObjectParameter("Security", security) :
                new ObjectParameter("Security", typeof(string));
    
            var exchgParameter = exchg != null ?
                new ObjectParameter("Exchg", exchg) :
                new ObjectParameter("Exchg", typeof(string));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var unitPriceParameter = unitPrice != null ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(string));
    
            var brkgParameter = brkg != null ?
                new ObjectParameter("Brkg", brkg) :
                new ObjectParameter("Brkg", typeof(string));
    
            var sTTParameter = sTT != null ?
                new ObjectParameter("STT", sTT) :
                new ObjectParameter("STT", typeof(string));
    
            var settlementAmountParameter = settlementAmount != null ?
                new ObjectParameter("SettlementAmount", settlementAmount) :
                new ObjectParameter("SettlementAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAMSTransTransactions", standardaccountParameter, tranDateParameter, settlementDateParameter, securityParameter, exchgParameter, quantityParameter, unitPriceParameter, brkgParameter, sTTParameter, settlementAmountParameter);
        }
    
        public virtual int INSERTTBTransactions(string accountId, string accountSubId, string accountSubcat, string openingbalDR, string openingbalCR, string transDuringperiodDR, string transDuringperiodCR, string closingbalDR, string closingbalCR)
        {
            var accountIdParameter = accountId != null ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(string));
    
            var accountSubIdParameter = accountSubId != null ?
                new ObjectParameter("AccountSubId", accountSubId) :
                new ObjectParameter("AccountSubId", typeof(string));
    
            var accountSubcatParameter = accountSubcat != null ?
                new ObjectParameter("AccountSubcat", accountSubcat) :
                new ObjectParameter("AccountSubcat", typeof(string));
    
            var openingbalDRParameter = openingbalDR != null ?
                new ObjectParameter("OpeningbalDR", openingbalDR) :
                new ObjectParameter("OpeningbalDR", typeof(string));
    
            var openingbalCRParameter = openingbalCR != null ?
                new ObjectParameter("OpeningbalCR", openingbalCR) :
                new ObjectParameter("OpeningbalCR", typeof(string));
    
            var transDuringperiodDRParameter = transDuringperiodDR != null ?
                new ObjectParameter("TransDuringperiodDR", transDuringperiodDR) :
                new ObjectParameter("TransDuringperiodDR", typeof(string));
    
            var transDuringperiodCRParameter = transDuringperiodCR != null ?
                new ObjectParameter("TransDuringperiodCR", transDuringperiodCR) :
                new ObjectParameter("TransDuringperiodCR", typeof(string));
    
            var closingbalDRParameter = closingbalDR != null ?
                new ObjectParameter("ClosingbalDR", closingbalDR) :
                new ObjectParameter("ClosingbalDR", typeof(string));
    
            var closingbalCRParameter = closingbalCR != null ?
                new ObjectParameter("ClosingbalCR", closingbalCR) :
                new ObjectParameter("ClosingbalCR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTTBTransactions", accountIdParameter, accountSubIdParameter, accountSubcatParameter, openingbalDRParameter, openingbalCRParameter, transDuringperiodDRParameter, transDuringperiodCRParameter, closingbalDRParameter, closingbalCRParameter);
        }
    
        public virtual ObjectResult<Sp_DemoReport_Result> Sp_DemoReport(string queryType, string customerAccount, string fromdate, string todate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var customerAccountParameter = customerAccount != null ?
                new ObjectParameter("CustomerAccount", customerAccount) :
                new ObjectParameter("CustomerAccount", typeof(string));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DemoReport_Result>("Sp_DemoReport", queryTypeParameter, customerAccountParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Sp_TrialBalanceReport_Result> Sp_TrialBalanceReport(string queryType, string accounts, string customerAccount, string accountSubLayer, string accountType, string fromDate, string toDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var accountsParameter = accounts != null ?
                new ObjectParameter("Accounts", accounts) :
                new ObjectParameter("Accounts", typeof(string));
    
            var customerAccountParameter = customerAccount != null ?
                new ObjectParameter("CustomerAccount", customerAccount) :
                new ObjectParameter("CustomerAccount", typeof(string));
    
            var accountSubLayerParameter = accountSubLayer != null ?
                new ObjectParameter("AccountSubLayer", accountSubLayer) :
                new ObjectParameter("AccountSubLayer", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_TrialBalanceReport_Result>("Sp_TrialBalanceReport", queryTypeParameter, accountsParameter, customerAccountParameter, accountSubLayerParameter, accountTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_user(string queryType, string userName, string accountNo, string emailId, string password, string passwordKey, Nullable<int> userType, string userId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_user", queryTypeParameter, userNameParameter, accountNoParameter, emailIdParameter, passwordParameter, passwordKeyParameter, userTypeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string queryType, string userName, string phoneNo, string emailId, string changePassword, string changePasswordKey, Nullable<long> userId, string tokenID, string iPAddress, string macAddress, Nullable<int> isLogin, Nullable<int> idleTime)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var changePasswordParameter = changePassword != null ?
                new ObjectParameter("ChangePassword", changePassword) :
                new ObjectParameter("ChangePassword", typeof(string));
    
            var changePasswordKeyParameter = changePasswordKey != null ?
                new ObjectParameter("ChangePasswordKey", changePasswordKey) :
                new ObjectParameter("ChangePasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var isLoginParameter = isLogin.HasValue ?
                new ObjectParameter("IsLogin", isLogin) :
                new ObjectParameter("IsLogin", typeof(int));
    
            var idleTimeParameter = idleTime.HasValue ?
                new ObjectParameter("idleTime", idleTime) :
                new ObjectParameter("idleTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", queryTypeParameter, userNameParameter, phoneNoParameter, emailIdParameter, changePasswordParameter, changePasswordKeyParameter, userIdParameter, tokenIDParameter, iPAddressParameter, macAddressParameter, isLoginParameter, idleTimeParameter);
        }
    }
}
